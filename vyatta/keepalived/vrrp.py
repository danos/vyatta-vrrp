#! /usr/bin/env python3

# Copyright (c) 2020 AT&T Intellectual Property.
# All rights reserved.
# SPDX-License-Identifier: GPL-2.0-only


class VrrpGroup:

    def __init__(self, name, delay, group_config):
        # Default values from existing code required for minimal
        # config
        self._priority = 100
        self._advert_int = 1
        self._state = "BACKUP"

        # Values outwith the dictionary
        self._intf_name = name
        self._start_delay = delay

        # Autogenerated values from minimal config
        self._vrid = group_config["tagnode"]
        self._accept = group_config["accept"]
        self._preempt = group_config["preempt"]
        self._version = group_config["version"]
        self._vips = group_config["virtual-address"]

        # Extended config
        if "priority" in group_config:
            self._priority = group_config["priority"]
        if "advert-int" in group_config:
            self._advert_int = group_config["advert-int"]

        # Generate instance name (TODO change to f-string with python 3.7)
        self._instance = "vyatta-{intf}-{vrid}".format(
            intf=self._intf_name, vrid=self._vrid
        )

        # Template required for minimal config
        self._template = """
vrrp_instance {instance} {{
    state {state}
    interface {intf}
    virtual_router_id {vrid}
    version {ver}
    start_delay {delay}
    priority {prio}
    advert_int {adv}
    virtual_ipaddress {{
        {addr_list}
    }}"""
        self._ending_string ="\n}"

    @property
    def instance_name(self):
        return self._instance

    def __repr__(self):
        vip_list = "\n".join(self._vips)
        completed_config = self._template.format(
            instance = self._instance,
            state = self._state,
            intf = self._intf_name,
            vrid = self._vrid,
            ver = self._version,
            delay = self._start_delay,
            prio = self._priority,
            adv = self._advert_int,
            addr_list = vip_list
        )
        completed_config += self._ending_string
        return completed_config

