#! /usr/bin/python3

# Copyright (c) 2019-2020 AT&T Intellectual Property.
# All rights reserved.
# SPDX-License-Identifier: GPL-2.0-only

from unittest import TestCase
import copy
import sys


class FakeVci(object):

    class Config(object):
        def set(self, conf):
            pass

    class State(object):
        def get(object):
            pass


sys.modules['vci'] = FakeVci
from vyatta.keepalived.config_file import KeepalivedConfig


class TestKeepalivedConfigFile(TestCase):

    # TODO:  Setup test class including the autogenerated section
    #       Add defeined strings for expected outputs
    def setup_method(self, method):
        self.autogeneration_string = """
#
# Autogenerated by /opt/vyatta/sbin/vyatta-vrrp
#


global_defs {
        enable_traps
        enable_dbus
        snmp_socket tcp:localhost:705:1
        enable_snmp_keepalived
        enable_snmp_rfc
}"""
        self.toplevel_dictionary = {"vyatta-interfaces-v1:interfaces": {}}
        self.dataplane_dictionary =\
            {"vyatta-interfaces-dataplane-v1:dataplane": []}
        self.bonding_dictionary = {"vyatta-bonding-v1:bonding": []}
        self.dataplane_group_config_string = """
vrrp_instance vyatta-dp0p1s1-1 {
    state BACKUP
    interface dp0p1s1
    virtual_router_id 1
    version 2
    start_delay 0
    priority 100
    advert_int 1
    virtual_ipaddress {
        10.10.1.100/25
    }
}"""
        self.dataplane_group_yang_repr = \
            {
                "tagnode": "dp0p1s1",
                "vyatta-vrrp-v1:vrrp": {
                    "start-delay": 0,
                    "vrrp-group": [
                        {
                            "accept": False,
                            "preempt": True,
                            "priority": 200,
                            "tagnode": 1,
                            "version": 2,
                            "virtual-address": [
                                "10.10.10.100"
                            ]
                        }
                    ]
                }
            }
        self.dataplane_vif_group_config_string = """
vrrp_instance vyatta-dp0p1s1.10-2 {
    state BACKUP
    interface dp0p1s1.10
    virtual_router_id 2
    version 2
    start_delay 0
    priority 100
    advert_int 1
    virtual_ipaddress {
        10.10.2.100/25
    }
}"""
        self.dataplane_vif_group_yang_repr = \
            {
                    "start-delay": 0,
                    "vrrp-group": [
                        {
                            "accept": False,
                            "preempt": True,
                            "priority": 200,
                            "tagnode": 1,
                            "version": 2,
                            "virtual-address": [
                                "10.10.10.100"
                            ]
                        }
                    ]
            }
        self.bonding_group_config_string = """
vrrp_instance vyatta-dp0bond0-2 {
    state BACKUP
    interface dp0bond0
    virtual_router_id 2
    version 2
    start_delay 60
    priority 100
    advert_int 1
    virtual_ipaddress {
        10.11.2.100/25
    }
}"""
        self.bonding_group_yang_repr = \
            {
                "tagnode": "dp0bond0",
                "vyatta-vrrp-v1:vrrp": {
                    "start-delay": 60,
                    "vrrp-group": [
                        {
                            "accept": False,
                            "preempt": True,
                            "priority": 200,
                            "tagnode": 1,
                            "version": 2,
                            "virtual-address": [
                                "10.10.10.100"
                            ]
                        }
                    ]
                }
            }

    def test_config_path_default(self):
        expected = "/etc/keepalived/keepalived.conf"
        config = KeepalivedConfig()
        result = config.config_file_path()
        assert result == expected

    def test_config_path_user_defined(self):
        expected = "/test/file/path.conf"
        config = KeepalivedConfig("/test/file/path.conf")
        result = config.config_file_path()
        assert result == expected

    def test_implementation_name(self):
        expected = "Keepalived"
        config = KeepalivedConfig("/test/file/path.conf")
        result = config.impl_name()
        assert result == expected

    def test_get_config_indexes_list_autogen(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        expected = [6]
        config = KeepalivedConfig()
        result = config._get_config_indexes(config_string.splitlines(),
                                            "global_defs")
        assert result == expected

    def test_get_config_indexes_list_no_groups(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        expected = []
        config = KeepalivedConfig()
        result = config._get_config_indexes(config_string.splitlines(),
                                            "vrrp_instance")
        assert result == expected

    def test_get_config_indexes_list_single_group(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        copy_string = copy.deepcopy(self.dataplane_group_config_string)
        config_string += copy_string
        expected = [13]
        config = KeepalivedConfig()
        result = config._get_config_indexes(config_string.splitlines(),
                                            "vrrp_instance")
        assert result == expected

    def test_get_config_indexes_list_multiple_groups(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        copy_string = copy.deepcopy(self.dataplane_group_config_string)
        config_string += copy_string
        copy_string = copy.deepcopy(self.bonding_group_config_string)
        config_string += copy_string
        expected = [13, 25]
        config = KeepalivedConfig()
        result = config._get_config_indexes(config_string.splitlines(),
                                            "vrrp_instance")
        assert result == expected

    def test_get_config_blocks_autogen(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        expected = [[
            "global_defs {", "enable_traps", "enable_dbus",
            "snmp_socket tcp:localhost:705:1", "enable_snmp_keepalived",
            "enable_snmp_rfc", "}"]]
        config = KeepalivedConfig()
        result = config._get_config_blocks(config_string.splitlines(), [6])
        assert result == expected

    def test_get_config_blocks_no_groups(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        expected = []
        config = KeepalivedConfig()
        result = config._get_config_blocks(config_string.splitlines(), [])
        assert result == expected

    def test_get_config_blocks_single_group(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        copy_string = copy.deepcopy(self.dataplane_group_config_string)
        config_string += copy_string
        expected = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ]
            ]
        config = KeepalivedConfig()
        result = config._get_config_blocks(config_string.splitlines(), [13])
        assert result == expected

    def test_get_config_blocks_multiple_groups(self):
        copy_string = copy.deepcopy(self.autogeneration_string)
        config_string = copy_string
        copy_string = copy.deepcopy(self.dataplane_group_config_string)
        config_string += copy_string
        copy_string = copy.deepcopy(self.bonding_group_config_string)
        config_string += copy_string
        expected = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ],
                [
                    "vrrp_instance vyatta-dp0bond0-2 {", "state BACKUP",
                    "interface dp0bond0", "virtual_router_id 2", "version 2",
                    "start_delay 60", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.11.2.100/25", "}", "}"
                ]
            ]
        config = KeepalivedConfig()
        result = config._get_config_blocks(
            config_string.splitlines(), [13, 25])
        assert result == expected

    def test_find_config_value_autogen_key_value_defined_entry(self):
        config_list = [[
            "global_defs {", "enable_traps", "enable_dbus",
            "snmp_socket tcp:localhost:705:1", "enable_snmp_keepalived",
            "enable_snmp_rfc", "}"]]
        expected = (True, "tcp:localhost:705:1")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "snmp_socket")
            assert result == expected

    def test_find_config_value_autogen_key_value_undefined_entry(self):
        config_list = [[
            "global_defs {", "enable_traps", "enable_dbus",
            "snmp_socket tcp:localhost:705:1", "enable_snmp_keepalived",
            "enable_snmp_rfc", "}"]]
        expected = (False, "NOTFOUND")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "Alice_in_wonderland")
            assert result == expected

    def test_find_config_value_autogen_presence_defined_entry(self):
        config_list = [[
            "global_defs {", "enable_traps", "enable_dbus",
            "snmp_socket tcp:localhost:705:1", "enable_snmp_keepalived",
            "enable_snmp_rfc", "}"]]
        expected = (True, [None])
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "enable_dbus")
            assert result == expected

    def test_find_config_value_autogen_presence_undefined_entry(self):
        config_list = [[
            "global_defs {", "enable_traps", "enable_dbus",
            "snmp_socket tcp:localhost:705:1", "enable_snmp_keepalived",
            "enable_snmp_rfc", "}"]]
        expected = (False, "NOTFOUND")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "The_two_towers")
            assert result == expected

    def test_find_config_value_single_group_defined_entry(self):
        config_list = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ]
            ]
        expected = (True, "BACKUP")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "state")
            assert result == expected

    def test_find_config_value_single_group_undefined_entry(self):
        config_list = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ]
            ]
        expected = (False, "NOTFOUND")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "There_and_back_again")
            assert result == expected

    def test_find_config_value_multiple_group_defined_entry(self):
        config_list = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ],
                [
                    "vrrp_instance vyatta-dp0bond0-2 {", "state BACKUP",
                    "interface dp0bond0", "virtual_router_id 2", "version 2",
                    "start_delay 60", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.11.2.100/25", "}", "}"
                ]
            ]
        expected = (True, "BACKUP")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "state")
            assert result == expected

    def test_find_config_value_multiple_group_undefined_entry(self):
        config_list = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}", "}"
                ],
                [
                    "vrrp_instance vyatta-dp0bond0-2 {", "state BACKUP",
                    "interface dp0bond0", "virtual_router_id 2", "version 2",
                    "start_delay 60", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.11.2.100/25", "}", "}"
                ]
            ]
        expected = (False, "NOTFOUND")
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "A_tale_of_two_cities")
            assert result == expected

    def test_find_config_value_multiple_group_presence_defined_entry(self):
        config_list = \
            [
                [
                    "vrrp_instance vyatta-dp0p1s1-1 {", "state BACKUP",
                    "interface dp0p1s1", "virtual_router_id 1", "version 2",
                    "start_delay 0", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.10.1.100/25", "}",
                    "vmac_xmit_base", "}"
                ],
                [
                    "vrrp_instance vyatta-dp0bond0-2 {", "state BACKUP",
                    "interface dp0bond0", "virtual_router_id 2", "version 2",
                    "start_delay 60", "priority 100", "advert_int 1",
                    "virtual_ipaddress {", "10.11.2.100/25", "}",
                    "vmac_xmit_base", "}"
                ]
            ]
        expected = (True, [None])
        config = KeepalivedConfig()
        for block in config_list:
            result = config._find_config_value(block, "vmac_xmit_base")
            assert result == expected
